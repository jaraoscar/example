package com.example.util;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.text.DateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

// Missing class and methods documentation
public class JobLogger { // Use a better class name

	private static boolean logToFile;
	private static boolean logToConsole;
	private static boolean logMessage;
	private static boolean logWarning;
	private static boolean logError;
	private static boolean logToDatabase;
	private boolean initialized; // remove unused variables
	private static Map dbParams;
	private static Logger logger;
	
	// Constructor with too many params
	public JobLogger(boolean logToFileParam, boolean logToConsoleParam, boolean logToDatabaseParam, boolean logMessageParam, boolean logWarningParam, boolean logErrorParam, Map dbParamsMap) {
		logger = Logger.getLogger("MyLog");
		logError = logErrorParam;
		logMessage = logMessageParam;
		logWarning = logWarningParam;
		logToDatabase = logToDatabaseParam;
		logToFile = logToFileParam;
		logToConsole = logToConsoleParam;
		dbParams = dbParamsMap;
	}
	
	// Method name should start with lowercase and again, too many params
	public static void LogMessage(String messageText, boolean message, boolean warning, boolean error) throws Exception { // It's better to throw the specific exception type than just a generic one
		
		messageText.trim(); // Null check needed before invoking trim
		
		if (messageText == null || messageText.length() == 0) {
			return; // Throw an exception at this point stating that a message is required
		}
		
		// Validations can be improved
		if (!logToConsole && !logToFile && !logToDatabase) {
			throw new Exception("Invalid configuration");
		}
		
		// message, warning and error flags are useless since the first variables already evaluate what's needed at this point
		if ((!logError && !logMessage && !logWarning) || (!message && !warning && !error)) {
			throw new Exception("Error or Warning or Message must be specified");
		}
		
		// It's better to use a properties file and manage the DB connection in another class
		Connection connection = null;
		Properties connectionProps = new Properties();
		
		connectionProps.put("user", dbParams.get("userName"));
		connectionProps.put("password", dbParams.get("password"));

		connection = DriverManager.getConnection(
				"jdbc:" + dbParams.get("dbms") + "://"
						+ dbParams.get("serverName") + ":"
						+ dbParams.get("portNumber") + "/", connectionProps);

		int t = 0; // Variable name must be improved, this describes nothing
		
		// If "t" means type then an enum should be created at this point to identify the message type
		if (message && logMessage) {
			t = 1;
		}

		if (error && logError) {
			t = 2;
		}

		if (warning && logWarning) {
			t = 3;
		}

		Statement stmt = connection.createStatement(); // User prepared statement to avoid SQL injection

		String l = null; // Variable name must be improved, this describes nothing
		
		// Could be better to store the file name in a properties file or constants and avoid any permission problem by creating the logs in the home folder
		File logFile = new File(dbParams.get("logFileFolder") + "/logFile.txt");
		if (!logFile.exists()) {
			logFile.createNewFile();
		}

		FileHandler fh = new FileHandler(dbParams.get("logFileFolder") + "/logFile.txt");
		
		ConsoleHandler ch = new ConsoleHandler();
		
		// The date can be obtained at this point only (instead of doing it many times)
		// The enum suggested to be created for the message types should be used at this point too
		if (error && logError) {
			l = l + "error " + DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
		}

		if (warning && logWarning) {
			l = l + "warning " + DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
		}

		if (message && logMessage) {
			l = l + "message " + DateFormat.getDateInstance(DateFormat.LONG).format(new Date()) + messageText;
		}
		
		// "l" variable is never used after this?
		
		// Evaluations should be improved at this point, repetitive code found
		if (logToFile) {
			logger.addHandler(fh);
			logger.log(Level.INFO, messageText);
		}

		if (logToConsole) {
			logger.addHandler(ch);
			logger.log(Level.INFO, messageText);
		}

		if (logToDatabase) {
			// I'd suggest a better DB table name, not to concat strings and use the enum suggested in a previous comment for the message type
			stmt.executeUpdate("insert into Log_Values('" + message + "', " + String.valueOf(t) + ")");
		}
	}
}